# Seaborn - Introduction

Seaborn is a Python data visualization library based on Matplotlib. It provides a high-level interface for drawing 
attractive and informative statistical graphics. In this tutorial, we will explore the basics of Seaborn and learn how 
to create different types of visualizations. Each section includes examples and tips to help you build a strong foundation.

## **Getting Started with Seaborn**

For simplicity in development and to avoid setup issues, you can also use Google Colab, a cloud-based Python environment.
Colab comes with many libraries, including Seaborn, pre-installed. To start using Google Colab:

1. Go to Google Colab.
2. Create a new notebook.

Run the following code to verify that Seaborn is available:

![Screenshot 2025-02-27 at 1.38.30 PM.png](../../../../../var/folders/4p/qcjztgyx17l3s6_trkb2146r0000gn/T/TemporaryItems/NSIRD_screencaptureui_Hox5K6/Screenshot%202025-02-27%20at%201.38.30%E2%80%AFPM.png)
This ensures you have a ready-to-use environment without needing to install anything locally.

If its not present it can be installed using pip:

![Screenshot 2025-02-27 at 1.38.58 PM.png](../../../../../var/folders/4p/qcjztgyx17l3s6_trkb2146r0000gn/T/TemporaryItems/NSIRD_screencaptureui_Szqs8G/Screenshot%202025-02-27%20at%201.38.58%E2%80%AFPM.png)

### **Importing Seaborn**

You need to import Seaborn and other essential libraries like NumPy and Pandas:

![Screenshot 2025-02-27 at 1.39.26 PM.png](../../../../../var/folders/4p/qcjztgyx17l3s6_trkb2146r0000gn/T/TemporaryItems/NSIRD_screencaptureui_AFLwyd/Screenshot%202025-02-27%20at%201.39.26%E2%80%AFPM.png)


### **Basic Plotting with Seaborn**

Seaborn provides a simpler and more intuitive interface compared to Matplotlib for creating complex visualizations 
with minimal code. While Matplotlib is highly flexible, Seaborn excels in statistical data visualization and 
integrates seamlessly with Pandas DataFrames, making it easier to plot data directly from tabular formats.

1. Scatter Plot

Scatter plots are used to observe relationships between two variables. To add more depth to your scatter plot, you can
use the hue parameter to include a third variable that categorizes the data. This allows you to differentiate between 
groups within your dataset:

![Screenshot 2025-02-27 at 1.40.36 PM.png](../../../../../var/folders/4p/qcjztgyx17l3s6_trkb2146r0000gn/T/TemporaryItems/NSIRD_screencaptureui_7r5zTB/Screenshot%202025-02-27%20at%201.40.36%E2%80%AFPM.png)
In this example, the hue parameter is used to color the points based on whether the meal occurred during lunch or dinner. 
This can help identify patterns or differences between categories.

2. Line Plot

Line plots are ideal for visualizing trends over time. They are particularly useful for time-series data, 
where the x-axis represents time intervals and the y-axis represents the observed values.

For example, you can create a line plot using a Pandas DataFrame with a datetime index:
![Screenshot 2025-02-27 at 1.42.35 PM.png](../../../../../var/folders/4p/qcjztgyx17l3s6_trkb2146r0000gn/T/TemporaryItems/NSIRD_screencaptureui_oSNxnc/Screenshot%202025-02-27%20at%201.42.35%E2%80%AFPM.png)

### Statistical Plots

3. Histogram

Histograms show the distribution of a variable. The kde (Kernel Density Estimate) parameter adds a smoothed curve to 
represent the probability density of the data. This is particularly useful for identifying the underlying distribution pattern:

![Screenshot 2025-02-27 at 1.43.25 PM.png](../../../../../var/folders/4p/qcjztgyx17l3s6_trkb2146r0000gn/T/TemporaryItems/NSIRD_screencaptureui_hrXSdf/Screenshot%202025-02-27%20at%201.43.25%E2%80%AFPM.png)
4. Box Plot

Box plots are used to visualize the distribution of a dataset and identify outliers.

![Screenshot 2025-02-27 at 1.44.14 PM.png](../../../../../var/folders/4p/qcjztgyx17l3s6_trkb2146r0000gn/T/TemporaryItems/NSIRD_screencaptureui_ZWnJdK/Screenshot%202025-02-27%20at%201.44.14%E2%80%AFPM.png)

![Screenshot 2025-02-27 at 1.45.54 PM.png](../../../../../var/folders/4p/qcjztgyx17l3s6_trkb2146r0000gn/T/TemporaryItems/NSIRD_screencaptureui_srG0MR/Screenshot%202025-02-27%20at%201.45.54%E2%80%AFPM.png)

![Screenshot 2025-02-27 at 1.47.29 PM.png](../../../../../var/folders/4p/qcjztgyx17l3s6_trkb2146r0000gn/T/TemporaryItems/NSIRD_screencaptureui_vzwZxP/Screenshot%202025-02-27%20at%201.47.29%E2%80%AFPM.png)

pairplot() is similar — it combines joint and marginal views — but rather than focusing on a single relationship, it visualizes every pairwise combination of variables simultaneously:

## **Tips for Using Seaborn**

1. Start with Built-in Datasets: Use Seaborn’s built-in datasets like tips or iris to practice.
2. Explore the Documentation: The [Seaborn documentation](https://seaborn.pydata.org/) is a great resource for understanding functions and parameters.
3. Combine with Pandas: Use Pandas to preprocess your data before visualizing it with Seaborn.
4. Experiment with Parameters: Don’t hesitate to experiment with various parameters to find the best settings for your data.
5. Save Your Plots: Use plt.savefig("plot.png") to save your visualizations for reports or presentations.

